// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  accounts      Account[]
  sessions      Session[]
  properties    Property[] @relation("PropertyOwner")
  favorites     Favorite[]
  creditInquiries CreditInquiry[]
  messages      Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  propertyInquiries PropertyInquiry[]

  // Campos específicos para Cliente
  nss           String?
  phone         String?
  address       String?
  birthDate     DateTime?

  // Campos específicos para Bróker
  license       String?
  company       String?
  bio           String?
  specialties   String[]
  experience    Int? // años de experiencia
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  price       Float
  type        PropertyType
  status      PropertyStatus @default(AVAILABLE)
  
  // Características básicas
  bedrooms    Int
  bathrooms   Int
  area        Float // metros cuadrados
  parking     Int?
  floors      Int?
  age         Int? // años de antigüedad
  
  // Ubicación
  address     String
  city        String
  state       String
  zipCode     String
  latitude    Float?
  longitude   Float?
  
  // Amenidades
  amenities   String[]
  
  // Imágenes
  images      String[]
  
  // Metadatos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  // Relaciones
  ownerId     String
  owner       User @relation("PropertyOwner", fields: [ownerId], references: [id])
  favorites   Favorite[]
  inquiries   PropertyInquiry[]
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, propertyId])
}

model CreditInquiry {
  id          String   @id @default(cuid())
  userId      String
  nss         String
  amount      Float?
  points      Int?
  status      InquiryStatus @default(PENDING)
  infonavitResponse Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User @relation(fields: [userId], references: [id])
}

model PropertyInquiry {
  id          String   @id @default(cuid())
  propertyId  String
  clientId    String
  message     String
  phone       String?
  email       String?
  status      InquiryStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  property    Property @relation(fields: [propertyId], references: [id])
  client      User @relation(fields: [clientId], references: [id])
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  sender      User @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User @relation("MessageReceiver", fields: [receiverId], references: [id])
}

enum UserRole {
  CLIENT
  BROKER
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  TOWNHOUSE
  LAND
  COMMERCIAL
  OFFICE
  WAREHOUSE
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  PENDING
  DRAFT
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
